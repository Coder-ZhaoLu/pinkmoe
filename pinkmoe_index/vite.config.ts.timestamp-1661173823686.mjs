// vite.config.ts
import path from "path";
import fs from "node:fs";
import { defineConfig } from "vite";
import Vue from "@vitejs/plugin-vue";
import Pages from "vite-plugin-pages";
import generateSitemap from "vite-ssg-sitemap";
import Layouts from "vite-plugin-vue-layouts";
import Components from "unplugin-vue-components/vite";
import AutoImport from "unplugin-auto-import/vite";
import Markdown from "vite-plugin-vue-markdown";
import { VitePWA } from "vite-plugin-pwa";
import VueI18n from "@intlify/vite-plugin-vue-i18n";
import Inspect from "vite-plugin-inspect";
import LinkAttributes from "markdown-it-link-attributes";
import Unocss from "unocss/vite";
import Shiki from "markdown-it-shiki";
import { presetAttributify, presetIcons, presetUno } from "unocss";
import PurgeIcons from "vite-plugin-purge-icons";

// config/constant.ts
var VITE_PORT = 443;
var API_BASE_URL = "/api";
var API_TARGET_URL = "http://localhost:9527/api/v1/Cms";
var API_SOCKET_URL = "/ws";
var API_SOCKET_TARGET_URL = "ws://localhost:9527/ws";
var API_UPLOAD_URL = "/uploads";
var API_UPLOAD_TARGET_URL = "http://localhost:9527/uploads";
var MOCK_API_BASE_URL = "/mock/api";
var MOCK_API_TARGET_URL = "http://localhost:3000";
var VITE_DROP_CONSOLE = true;

// config/vite/proxy.ts
var init = {
  [API_BASE_URL]: {
    target: API_TARGET_URL,
    changeOrigin: true,
    rewrite: (path2) => path2.replace(new RegExp(`^${API_BASE_URL}`), "")
  },
  [API_SOCKET_URL]: {
    target: API_SOCKET_TARGET_URL,
    ws: true,
    changeOrigin: true,
    rewrite: (path2) => path2.replace(new RegExp(`^${API_SOCKET_URL}`), "")
  },
  [API_UPLOAD_URL]: {
    target: API_UPLOAD_TARGET_URL,
    changeOrigin: true,
    rewrite: (path2) => path2.replace(new RegExp(`^${API_UPLOAD_URL}`), "")
  },
  [MOCK_API_BASE_URL]: {
    target: MOCK_API_TARGET_URL,
    changeOrigin: true,
    rewrite: (path2) => path2.replace(new RegExp(`^${MOCK_API_BASE_URL}`), "/api")
  }
};
var proxy_default = init;

// vite.config.ts
var __vite_injected_original_dirname = "/Users/zhaolu/Desktop/project/go_vue_gin/pinkmoe/pinkmoe_index";
function pathResolve(dir) {
  return path.resolve(process.cwd(), ".", dir);
}
var vite_config_default = defineConfig({
  resolve: {
    alias: [
      {
        find: /\/@\//,
        replacement: `${pathResolve("src")}/`
      },
      {
        find: /\/#\//,
        replacement: `${pathResolve("types")}/`
      }
    ]
  },
  plugins: [
    Vue({
      include: [/\.vue$/, /\.md$/],
      reactivityTransform: true
    }),
    Pages({
      extensions: ["vue", "md"]
    }),
    Layouts(),
    AutoImport({
      imports: [
        "vue",
        "vue-router",
        "vue-i18n",
        "vue/macros",
        "@vueuse/head",
        "@vueuse/core"
      ],
      dts: "src/auto-imports.d.ts",
      dirs: [
        "src/composables",
        "src/store"
      ],
      vueTemplate: true
    }),
    Components({
      extensions: ["vue", "md"],
      include: [/\.vue$/, /\.vue\?vue/, /\.md$/],
      dts: "src/components.d.ts"
    }),
    Unocss({
      presets: [
        presetUno(),
        presetAttributify(),
        presetIcons({
          cdn: "https://esm.sh/"
        })
      ]
    }),
    PurgeIcons({}),
    Markdown({
      wrapperClasses: "prose prose-sm m-auto text-left",
      headEnabled: true,
      markdownItSetup(md) {
        md.use(Shiki, {
          theme: {
            light: "vitesse-light",
            dark: "vitesse-dark"
          }
        });
        md.use(LinkAttributes, {
          matcher: (link) => /^https?:\/\//.test(link),
          attrs: {
            target: "_blank",
            rel: "noopener"
          }
        });
      }
    }),
    VitePWA({
      registerType: "autoUpdate",
      includeAssets: ["favicon.svg", "safari-pinned-tab.svg"],
      manifest: {
        name: "Vitesse",
        short_name: "Vitesse",
        theme_color: "#ffffff",
        icons: [
          {
            src: "/pwa-192x192.png",
            sizes: "192x192",
            type: "image/png"
          },
          {
            src: "/pwa-512x512.png",
            sizes: "512x512",
            type: "image/png"
          },
          {
            src: "/pwa-512x512.png",
            sizes: "512x512",
            type: "image/png",
            purpose: "any maskable"
          }
        ]
      }
    }),
    VueI18n({
      runtimeOnly: true,
      compositionOnly: true,
      include: [path.resolve(__vite_injected_original_dirname, "locales/**")]
    }),
    Inspect()
  ],
  server: {
    hmr: { overlay: false },
    https: {
      key: fs.readFileSync("./nginx/ssl/pinkmoe.key"),
      cert: fs.readFileSync("./nginx/ssl/pinkmoe.crt")
    },
    port: VITE_PORT,
    open: false,
    cors: false,
    host: "0.0.0.0",
    proxy: proxy_default
  },
  test: {
    include: ["test/**/*.test.ts"],
    environment: "jsdom",
    deps: {
      inline: ["@vue", "@vueuse", "vue-demi"]
    }
  },
  ssgOptions: {
    script: "async",
    formatting: "minify",
    onFinished() {
      generateSitemap();
    }
  },
  build: {
    target: "es2015",
    terserOptions: {
      compress: {
        keep_infinity: true,
        drop_console: VITE_DROP_CONSOLE
      }
    },
    rollupOptions: {
      external: []
    },
    chunkSizeWarningLimit: 2e3
  },
  ssr: {
    external: [],
    noExternal: [
      "workbox-window",
      /vue-i18n/
    ]
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
